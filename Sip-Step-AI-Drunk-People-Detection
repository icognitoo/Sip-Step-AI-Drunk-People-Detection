{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO4GC/g3s1BZ6K8kTzHNeDa",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/icognitoo/Sip-Step-AI-Drunk-People-Detection/blob/main/Sip-Step-AI-Drunk-People-Detection\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9NwcQZguDrky"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "import cv2\n",
        "import numpy as np\n",
        "import os\n",
        "from glob import glob\n",
        "from tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input\n",
        "from google.colab import files\n",
        "import zipfile\n",
        "\n",
        "# Create directories for storage\n",
        "os.makedirs('checkpoints', exist_ok=True)\n",
        "os.makedirs('tfrecords', exist_ok=True)\n",
        "\n",
        "# data Preprocessing function\n",
        "def load_and_preprocess_video(video_path, label, num_frames=32, frame_size=224):\n",
        "    cap = cv2.VideoCapture(video_path)\n",
        "    frames = []\n",
        "    while len(frames) < num_frames:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "        frame = cv2.resize(frame, (frame_size, frame_size))\n",
        "        frames.append(frame)\n",
        "    cap.release()\n",
        "    while len(frames) < num_frames:\n",
        "        frames.append(frames[-1] if frames else np.zeros((frame_size, frame_size, 3), dtype=np.uint8))\n",
        "    frames = np.stack(frames)\n",
        "    frames = preprocess_input(frames.astype(np.float32))\n",
        "    return frames, label\n",
        "\n",
        "# Convert and store data to TFRecords\n",
        "def create_tfrecords(video_paths, labels, filename):\n",
        "    def serialize_example(frames, label):\n",
        "        feature = {\n",
        "            'frames': tf.train.Feature(bytes_list=tf.train.BytesList(value=[\n",
        "                tf.io.serialize_tensor(frames).numpy()])),\n",
        "            'label': tf.train.Feature(int64_list=tf.train.Int64List(value=[label]))\n",
        "        }\n",
        "        return tf.train.Example(features=tf.train.Features(feature=feature)).SerializeToString()\n",
        "\n",
        "    with tf.io.TFRecordWriter(f'tfrecords/{filename}.tfrecord') as writer:  # Fixed from TFRecordDataset\n",
        "        for path, label in zip(video_paths, labels):\n",
        "            frames, label = load_and_preprocess_video(path, label)\n",
        "            example = serialize_example(frames, label)\n",
        "            writer.write(example)\n",
        "\n",
        "# Load dataset from TFRecords\n",
        "def load_tfrecords(filename):\n",
        "    def parse_tfrecord(example):\n",
        "        feature_description = {\n",
        "            'frames': tf.io.FixedLenFeature([], tf.string),\n",
        "            'label': tf.io.FixedLenFeature([], tf.int64)\n",
        "        }\n",
        "        example = tf.io.parse_single_example(example, feature_description)\n",
        "        frames = tf.io.parse_tensor(example['frames'], out_type=tf.float32)\n",
        "        return frames, example['label']\n",
        "\n",
        "    return tf.data.TFRecordDataset(f'tfrecords/{filename}.tfrecord') \\\n",
        "                 .map(parse_tfrecord) \\\n",
        "                 .batch(4) \\\n",
        "                 .prefetch(tf.data.AUTOTUNE)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check if preprocessed data exists\n",
        "if not os.path.exists('tfrecords/train.tfrecord'):\n",
        "    # Upload and extract videos in Colab\n",
        "    uploaded = files.upload()\n",
        "    zip_filename = list(uploaded.keys())[0]\n",
        "    with zipfile.ZipFile(zip_filename, 'r') as zip_ref:\n",
        "        zip_ref.extractall('videos')\n",
        "    drunk_videos = glob('/content/drive/MyDrive/Colab Notebooks/Drunk-20250406T071554Z-001/Drunk*.mp4')\n",
        "    sober_videos = glob('/content/drive/MyDrive/Colab Notebooks/Sober-20250406T071555Z-001/Sober*.mp4')\n",
        "    video_paths = drunk_videos + sober_videos\n",
        "    labels = [1]*len(drunk_videos) + [0]*len(sober_videos)\n",
        "\n",
        ""
      ],
      "metadata": {
        "id": "RJlM__iPF4-_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "   # Shuffle and split\n",
        "    indices = np.random.permutation(len(video_paths))\n",
        "    video_paths = [video_paths[i] for i in indices]\n",
        "    labels = [labels[i] for i in indices]\n",
        "    train_size = int(0.8 * len(video_paths))\n",
        "\n",
        "    # Create TFRecords\n",
        "    create_tfrecords(video_paths[:train_size], labels[:train_size], 'train')\n",
        "    create_tfrecords(video_paths[train_size:], labels[train_size:], 'test')\n",
        "\n",
        "# Load datasets\n",
        "train_dataset = load_tfrecords('train')\n",
        "test_dataset = load_tfrecords('test')\n",
        "\n",
        "# Model\n",
        "cnn = ResNet50(include_top=False, pooling='avg')\n",
        "cnn.trainable = False\n",
        "\n",
        "model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Input(shape=(32, 224, 224, 3)),\n",
        "    tf.keras.layers.TimeDistributed(cnn),\n",
        "    tf.keras.layers.LSTM(256),\n",
        "    tf.keras.layers.Dense(1, activation='sigmoid')\n",
        "])\n",
        "\n",
        "# Checkpoint setup\n",
        "checkpoint_path = \"checkpoints/cp-{epoch:04d}.keras\"\n",
        "callbacks = [\n",
        "    tf.keras.callbacks.ModelCheckpoint(\n",
        "        filepath=checkpoint_path,\n",
        "        save_weights_only=False,\n",
        "        save_best_only=True,\n",
        "        monitor='val_accuracy',\n",
        "        verbose=1\n",
        "    ),\n",
        "    tf.keras.callbacks.BackupAndRestore(\n",
        "        backup_dir='backup/',\n",
        "        save_freq='epoch'\n",
        "    ),\n",
        "    tf.keras.callbacks.EarlyStopping(\n",
        "        patience=5,\n",
        "        restore_best_weights=True\n",
        "    )\n",
        "]\n",
        "\n",
        "# Resume training if checkpoint exists\n",
        "initial_epoch = 0\n",
        "latest_checkpoint = tf.train.latest_checkpoint('checkpoints/')\n",
        "if latest_checkpoint:\n",
        "  model = tf.keras.models.load_model(latest_checkpoint)\n",
        "  initial_epoch = int(latest_checkpoint.split('-')[-1].split('.')[0])\n",
        "\n",
        "\n",
        "\n",
        "# Compile model\n",
        "model.compile(\n",
        "    optimizer=tf.keras.optimizers.Adam(1e-4),\n",
        "    loss='binary_crossentropy',\n",
        "    metrics=['accuracy', tf.keras.metrics.Precision(), tf.keras.metrics.Recall()]\n",
        ")\n"
      ],
      "metadata": {
        "id": "nxlL0EFFF-o1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Flatten, Dense\n",
        "\n",
        "# Prepare data (example)\n",
        "(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.mnist.load_data()\n",
        "train_dataset = tf.data.Dataset.from_tensor_slices((train_images, train_labels))\n",
        "test_dataset = tf.data.Dataset.from_tensor_slices((test_images, test_labels))\n",
        "\n",
        "\n",
        "train_dataset = train_dataset.batch(32).prefetch(tf.data.AUTOTUNE)\n",
        "test_dataset = test_dataset.batch(32).prefetch(tf.data.AUTOTUNE)\n",
        "\n",
        "# 4. Building model with proper input shape\n",
        "model = Sequential([\n",
        "    Flatten(input_shape=(28, 28)),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dense(10, activation='softmax')\n",
        "])\n",
        "model.compile(optimizer='adam',\n",
        "              loss='sparse_categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "# 6. Training the model\n",
        "history = model.fit(\n",
        "    train_dataset,\n",
        "    validation_data=test_dataset,\n",
        "    epochs=10\n",
        ")\n"
      ],
      "metadata": {
        "id": "4HhOXb5LF-hn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Flatten, Dense, Conv2D, MaxPooling2D, Reshape\n",
        "\n",
        "model = Sequential([\n",
        "    # Input shape for single frames (28, 28, 1)\n",
        "    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Flatten(),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dense(1, activation='sigmoid')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "#Prediction Function\n",
        "def predict_video(video_path):\n",
        "    # returns shape [32, height, width, channels]\n",
        "    frames, _ = load_and_preprocess_video(video_path, 0)\n",
        "\n",
        "    # Process each frame individually\n",
        "    predictions = []\n",
        "    for frame in frames:\n",
        "        # Resize and convert to grayscale\n",
        "        processed_frame = tf.image.resize(frame, [28, 28])\n",
        "        processed_frame = tf.image.rgb_to_grayscale(processed_frame)\n",
        "\n",
        "        # Add batch dimension and predict\n",
        "        frame_pred = model.predict(processed_frame[np.newaxis, ...])[0][0]\n",
        "        predictions.append(frame_pred)\n",
        "\n",
        "    # Aggregate predictions\n",
        "    avg_prediction = np.mean(predictions)\n",
        "    return f\"Drunken ({avg_prediction:.2%})\" if avg_prediction > 0.5 else f\"Sober ({1-avg_prediction:.2%})\"\n",
        "\n",
        "#Usage\n",
        "video_path = input(\"Enter video path: \").strip()\n",
        "print(predict_video(video_path))"
      ],
      "metadata": {
        "id": "vDAKje7OGhVW"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}